name: Build App
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - "V*"

jobs:
  build:
    name: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, windows, macos]
        include:
        - build: linux
          os: ubuntu-20.04
          rust: stable
          target: x86_64-unknown-linux-musl
          # archive-name: target-linux.tar.gz
        - build: windows
          os: windows-latest
          rust: stable-x86_64-msvc
          target: x86_64-pc-windows-msvc
          # archive-name: target-windows.tar.gz
        - build: macos
          os: macos-latest
          rust: stable
          target: x86_64-apple-darwin
          # archive-name: target-macos.tar.gz
      fail-fast: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: install node
      uses: actions/setup-node@v1
      with:
        node-version: 18

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true
        target: ${{ matrix.target }}

    - name: install dependencies (ubuntu only)
      if: matrix.os == 'ubuntu-20.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf gnome-video-effects gnome-video-effects-extra

    - name: build for Ubuntu
      if: matrix.os == 'ubuntu-20.04'
      run: npm run build:all-unix

    - name: build for MacOS
      if: matrix.os == 'macos-latest'
      run: |
        rustup target add aarch64-apple-darwin
        npm run build:all-unix

    - name: build for windows
      if: matrix.os == 'windows-latest'
      run: |
        npm run build:all-windows

    - name: Upload files
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        curl -L https://github.com/probonopd/uploadtool/raw/master/upload.sh --output upload.sh
        bash upload.sh output/*/*.*
    
    # - name: Build archive
    #   shell: bash
    #   run: |
    #     cd src-tauri
    #     tar -czf "${{ matrix.archive-name }}" target
    
    # - name: Upload archive
    #   uses: actions/upload-artifact@v1
    #   with:
    #     name: ${{ matrix.archive-name }}
    #     path: src-tauri/${{ matrix.archive-name }}

    - name: "Store cache"
      uses: Swatinem/rust-cache@v2
      with:
        # The prefix cache key, this can be changed to start a new cache manually.
        # default: "v0-rust"
        prefix-key: ""

        # A cache key that is used instead of the automatic `job`-based key,
        # and is stable over multiple jobs.
        # default: empty
        shared-key: ""

        # An additional cache key that is added alongside the automatic `job`-based
        # cache key and can be used to further differentiate jobs.
        # default: empty
        key: ""

        # A whitespace separated list of env-var *prefixes* who's value contributes
        # to the environment cache key.
        # The env-vars are matched by *prefix*, so the default `RUST` var will
        # match all of `RUSTC`, `RUSTUP_*`, `RUSTFLAGS`, `RUSTDOC_*`, etc.
        # default: "CARGO CC CFLAGS CXX CMAKE RUST"
        env-vars: ""

        # The cargo workspaces and target directory configuration.
        # These entries are separated by newlines and have the form
        # `$workspace -> $target`. The `$target` part is treated as a directory
        # relative to the `$workspace` and defaults to "target" if not explicitly given.
        # default: ". -> target"
        workspaces: "src-tauri"

        # Additional non workspace directories to be cached, separated by newlines.
        cache-directories: ""

        # Determines whether workspace `target` directories are cached.
        # If `false`, only the cargo registry will be cached.
        # default: "true"
        cache-targets: ""

        # Determines if the cache should be saved even when the workflow has failed.
        # default: "false"
        cache-on-failure: ""

        # Determiners whether the cache should be saved.
        # If `false`, the cache is only restored.
        # Useful for jobs where the matrix is additive e.g. additional Cargo features.
        # default: "true"
        save-if: ""
